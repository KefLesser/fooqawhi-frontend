{"ast":null,"code":"import { placesData } from '../data/places.js';\nimport axios from 'axios';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.hintsGiven = [];\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n    this.startTime = Date.now();\n    this.achievements = [];\n\n    // Google Geocoding API configuration\n    this.geocodingApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'YOUR_API_KEY_HERE';\n    this.geocodingBaseUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    let currentHint = null;\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      currentHint = {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n      return currentHint;\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    this.hintsGiven.push({\n      id: this.currentHintIndex + 1,\n      text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex]\n    });\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Geocode a location using Google Geocoding API\n  async geocodeLocation(location, country) {\n    try {\n      const query = `${location}, ${country}`;\n      const response = await axios.get(this.geocodingBaseUrl, {\n        params: {\n          address: query,\n          key: this.geocodingApiKey\n        }\n      });\n      if (response.data.status === 'OK' && response.data.results.length > 0) {\n        const result = response.data.results[0];\n        const location = result.geometry.location;\n        return {\n          success: true,\n          latitude: location.lat,\n          longitude: location.lng,\n          formattedAddress: result.formatted_address,\n          placeId: result.place_id,\n          addressComponents: result.address_components\n        };\n      } else {\n        return {\n          success: false,\n          error: response.data.status || 'No results found'\n        };\n      }\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      return {\n        success: false,\n        error: 'Geocoding service unavailable'\n      };\n    }\n  }\n\n  // Calculate distance between two points using Haversine formula\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  // Check if guess is correct based on distance threshold\n  isGuessCorrect(guessLat, guessLon, targetLat, targetLon, thresholdKm = 50) {\n    const distance = this.calculateDistance(guessLat, guessLon, targetLat, targetLon);\n    return distance <= thresholdKm;\n  }\n\n  // Submit a guess with geocoding validation\n  async submitGuess(guess) {\n    // First, geocode the guessed location\n    const geocodeResult = await this.geocodeLocation(guess.location, guess.country);\n    if (!geocodeResult.success) {\n      return {\n        id: Date.now(),\n        location: guess.location,\n        country: guess.country,\n        timestamp: new Date(),\n        isCorrect: false,\n        error: geocodeResult.error,\n        distance: null,\n        geocodedLocation: null\n      };\n    }\n\n    // Calculate distance to target location\n    const distance = this.calculateDistance(geocodeResult.latitude, geocodeResult.longitude, this.currentPlace.latitude, this.currentPlace.longitude);\n\n    // Check if guess is correct (within 50km threshold)\n    const isCorrect = this.isGuessCorrect(geocodeResult.latitude, geocodeResult.longitude, this.currentPlace.latitude, this.currentPlace.longitude);\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: isCorrect,\n      distance: Math.round(distance),\n      geocodedLocation: {\n        latitude: geocodeResult.latitude,\n        longitude: geocodeResult.longitude,\n        formattedAddress: geocodeResult.formattedAddress\n      }\n    };\n    this.guesses.push(guessData);\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n      this.checkAchievements(); // Check achievements on win\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n    return guessData;\n  }\n\n  // Get game status\n  getGameStatus() {\n    const gameTime = Date.now() - this.startTime;\n    const minutes = Math.floor(gameTime / 60000);\n    const seconds = Math.floor(gameTime % 60000 / 1000);\n    return {\n      currentHint: this.getCurrentHint(),\n      hintsGiven: this.hintsGiven,\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses,\n      gameTime: `${minutes}:${seconds.toString().padStart(2, '0')}`,\n      achievements: this.achievements\n    };\n  }\n\n  // Check and award achievements\n  checkAchievements() {\n    const newAchievements = [];\n\n    // Speed achievements\n    const gameTime = Date.now() - this.startTime;\n    if (gameTime < 60000 && this.gameState === 'won') {\n      // Under 1 minute\n      newAchievements.push({\n        id: 'speed_demon',\n        title: 'Speed Demon',\n        description: 'Found the Fooqawhi in under 1 minute!',\n        icon: 'âš¡'\n      });\n    }\n\n    // Efficiency achievements\n    const hintEfficiency = (this.currentHintIndex + 1) / this.currentPlace.sarcastic_descriptions.length;\n    if (hintEfficiency <= 0.5 && this.gameState === 'won') {\n      // Used 50% or fewer hints\n      newAchievements.push({\n        id: 'hint_master',\n        title: 'Hint Master',\n        description: 'Solved with 50% or fewer hints!',\n        icon: 'ðŸ§ '\n      });\n    }\n\n    // Accuracy achievements\n    if (this.guesses.length === 1 && this.gameState === 'won') {\n      // First guess correct\n      newAchievements.push({\n        id: 'first_guess',\n        title: 'First Guess Wonder',\n        description: 'Found the Fooqawhi on your first try!',\n        icon: 'ðŸŽ¯'\n      });\n    }\n\n    // Add new achievements\n    newAchievements.forEach(achievement => {\n      if (!this.achievements.find(a => a.id === achievement.id)) {\n        this.achievements.push(achievement);\n      }\n    });\n    return newAchievements;\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n    this.startTime = Date.now();\n    this.achievements = [];\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + this.currentHintIndex * zoomIncrement, 8);\n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\nexport default gameService;","map":{"version":3,"names":["placesData","axios","GameService","constructor","currentPlace","places","currentHintIndex","hintsGiven","guesses","gameState","startTime","Date","now","achievements","geocodingApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","geocodingBaseUrl","getCurrentHint","currentHint","sarcastic_descriptions","length","hintNumber","text","isLastHint","getNextHint","push","id","geocodeLocation","location","country","query","response","get","params","address","key","data","status","results","result","geometry","success","latitude","lat","longitude","lng","formattedAddress","formatted_address","placeId","place_id","addressComponents","address_components","error","console","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","isGuessCorrect","guessLat","guessLon","targetLat","targetLon","thresholdKm","distance","submitGuess","guess","geocodeResult","timestamp","isCorrect","geocodedLocation","guessData","round","checkAchievements","getGameStatus","gameTime","minutes","floor","seconds","hintsUsed","totalHints","guessesMade","maxGuesses","toString","padStart","newAchievements","title","description","icon","hintEfficiency","forEach","achievement","find","resetGame","getMapView","baseZoom","zoomIncrement","currentZoom","min","center","zoom","getGuessFeedback","direction","getDirection","latDiff","abs","lonDiff","gameService"],"sources":["/Users/keithlesser/Documents/projects/fooqawhi-frontend/src/services/gameService.js"],"sourcesContent":["import { placesData } from '../data/places.js';\nimport axios from 'axios';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.hintsGiven = []\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n    this.startTime = Date.now();\n    this.achievements = [];\n    \n    // Google Geocoding API configuration\n    this.geocodingApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'YOUR_API_KEY_HERE';\n    this.geocodingBaseUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    let currentHint = null;\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      currentHint = {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n      return currentHint;\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    this.hintsGiven.push({\n      id: this.currentHintIndex + 1, \n      text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex] \n    })\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Geocode a location using Google Geocoding API\n  async geocodeLocation(location, country) {\n    try {\n      const query = `${location}, ${country}`;\n      const response = await axios.get(this.geocodingBaseUrl, {\n        params: {\n          address: query,\n          key: this.geocodingApiKey\n        }\n      });\n\n      if (response.data.status === 'OK' && response.data.results.length > 0) {\n        const result = response.data.results[0];\n        const location = result.geometry.location;\n        \n        return {\n          success: true,\n          latitude: location.lat,\n          longitude: location.lng,\n          formattedAddress: result.formatted_address,\n          placeId: result.place_id,\n          addressComponents: result.address_components\n        };\n      } else {\n        return {\n          success: false,\n          error: response.data.status || 'No results found'\n        };\n      }\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      return {\n        success: false,\n        error: 'Geocoding service unavailable'\n      };\n    }\n  }\n\n  // Calculate distance between two points using Haversine formula\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    \n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n              Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  // Check if guess is correct based on distance threshold\n  isGuessCorrect(guessLat, guessLon, targetLat, targetLon, thresholdKm = 50) {\n    const distance = this.calculateDistance(guessLat, guessLon, targetLat, targetLon);\n    return distance <= thresholdKm;\n  }\n\n  // Submit a guess with geocoding validation\n  async submitGuess(guess) {\n    // First, geocode the guessed location\n    const geocodeResult = await this.geocodeLocation(guess.location, guess.country);\n    \n    if (!geocodeResult.success) {\n      return {\n        id: Date.now(),\n        location: guess.location,\n        country: guess.country,\n        timestamp: new Date(),\n        isCorrect: false,\n        error: geocodeResult.error,\n        distance: null,\n        geocodedLocation: null\n      };\n    }\n\n    // Calculate distance to target location\n    const distance = this.calculateDistance(\n      geocodeResult.latitude,\n      geocodeResult.longitude,\n      this.currentPlace.latitude,\n      this.currentPlace.longitude\n    );\n\n    // Check if guess is correct (within 50km threshold)\n    const isCorrect = this.isGuessCorrect(\n      geocodeResult.latitude,\n      geocodeResult.longitude,\n      this.currentPlace.latitude,\n      this.currentPlace.longitude\n    );\n\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: isCorrect,\n      distance: Math.round(distance),\n      geocodedLocation: {\n        latitude: geocodeResult.latitude,\n        longitude: geocodeResult.longitude,\n        formattedAddress: geocodeResult.formattedAddress\n      }\n    };\n\n    this.guesses.push(guessData);\n\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n      this.checkAchievements(); // Check achievements on win\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n\n    return guessData;\n  }\n\n\n  // Get game status\n  getGameStatus() {\n    const gameTime = Date.now() - this.startTime;\n    const minutes = Math.floor(gameTime / 60000);\n    const seconds = Math.floor((gameTime % 60000) / 1000);\n    \n    return {\n      currentHint: this.getCurrentHint(),\n      hintsGiven: this.hintsGiven,\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses,\n      gameTime: `${minutes}:${seconds.toString().padStart(2, '0')}`,\n      achievements: this.achievements\n    };\n  }\n\n  // Check and award achievements\n  checkAchievements() {\n    const newAchievements = [];\n    \n    // Speed achievements\n    const gameTime = Date.now() - this.startTime;\n    if (gameTime < 60000 && this.gameState === 'won') { // Under 1 minute\n      newAchievements.push({\n        id: 'speed_demon',\n        title: 'Speed Demon',\n        description: 'Found the Fooqawhi in under 1 minute!',\n        icon: 'âš¡'\n      });\n    }\n    \n    // Efficiency achievements\n    const hintEfficiency = (this.currentHintIndex + 1) / this.currentPlace.sarcastic_descriptions.length;\n    if (hintEfficiency <= 0.5 && this.gameState === 'won') { // Used 50% or fewer hints\n      newAchievements.push({\n        id: 'hint_master',\n        title: 'Hint Master',\n        description: 'Solved with 50% or fewer hints!',\n        icon: 'ðŸ§ '\n      });\n    }\n    \n    // Accuracy achievements\n    if (this.guesses.length === 1 && this.gameState === 'won') { // First guess correct\n      newAchievements.push({\n        id: 'first_guess',\n        title: 'First Guess Wonder',\n        description: 'Found the Fooqawhi on your first try!',\n        icon: 'ðŸŽ¯'\n      });\n    }\n    \n    // Add new achievements\n    newAchievements.forEach(achievement => {\n      if (!this.achievements.find(a => a.id === achievement.id)) {\n        this.achievements.push(achievement);\n      }\n    });\n    \n    return newAchievements;\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n    this.startTime = Date.now();\n    this.achievements = [];\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + (this.currentHintIndex * zoomIncrement), 8);\n    \n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    \n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    \n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\n\nexport default gameService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}