{"ast":null,"code":"import { placesData } from '../data/places.js';\nimport axios from 'axios';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.hintsGiven = [];\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n    this.startTime = Date.now();\n    this.achievements = [];\n\n    // Google Geocoding API configuration\n    this.geocodingApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'YOUR_API_KEY_HERE';\n    this.geocodingBaseUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    let currentHint = null;\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      currentHint = {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n      return currentHint;\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    this.hintsGiven.push({\n      id: this.currentHintIndex + 1,\n      text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex]\n    });\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Submit a guess\n  submitGuess(guess) {\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: this.checkGuess(guess)\n    };\n    this.guesses.push(guessData);\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n      this.checkAchievements(); // Check achievements on win\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n    return guessData;\n  }\n\n  // Check if guess is correct\n  checkGuess(guess) {\n    const locationMatch = guess.location.toLowerCase().includes(this.currentPlace.name.toLowerCase());\n    const countryMatch = guess.country.toLowerCase().includes(this.currentPlace.country.toLowerCase());\n    return locationMatch && countryMatch;\n  }\n\n  // Get game status\n  getGameStatus() {\n    const gameTime = Date.now() - this.startTime;\n    const minutes = Math.floor(gameTime / 60000);\n    const seconds = Math.floor(gameTime % 60000 / 1000);\n    return {\n      currentHint: this.getCurrentHint(),\n      hintsGiven: this.hintsGiven,\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses,\n      gameTime: `${minutes}:${seconds.toString().padStart(2, '0')}`,\n      achievements: this.achievements\n    };\n  }\n\n  // Check and award achievements\n  checkAchievements() {\n    const newAchievements = [];\n\n    // Speed achievements\n    const gameTime = Date.now() - this.startTime;\n    if (gameTime < 60000 && this.gameState === 'won') {\n      // Under 1 minute\n      newAchievements.push({\n        id: 'speed_demon',\n        title: 'Speed Demon',\n        description: 'Found the Fooqawhi in under 1 minute!',\n        icon: 'âš¡'\n      });\n    }\n\n    // Efficiency achievements\n    const hintEfficiency = (this.currentHintIndex + 1) / this.currentPlace.sarcastic_descriptions.length;\n    if (hintEfficiency <= 0.5 && this.gameState === 'won') {\n      // Used 50% or fewer hints\n      newAchievements.push({\n        id: 'hint_master',\n        title: 'Hint Master',\n        description: 'Solved with 50% or fewer hints!',\n        icon: 'ðŸ§ '\n      });\n    }\n\n    // Accuracy achievements\n    if (this.guesses.length === 1 && this.gameState === 'won') {\n      // First guess correct\n      newAchievements.push({\n        id: 'first_guess',\n        title: 'First Guess Wonder',\n        description: 'Found the Fooqawhi on your first try!',\n        icon: 'ðŸŽ¯'\n      });\n    }\n\n    // Add new achievements\n    newAchievements.forEach(achievement => {\n      if (!this.achievements.find(a => a.id === achievement.id)) {\n        this.achievements.push(achievement);\n      }\n    });\n    return newAchievements;\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n    this.startTime = Date.now();\n    this.achievements = [];\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + this.currentHintIndex * zoomIncrement, 8);\n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\nexport default gameService;","map":{"version":3,"names":["placesData","axios","GameService","constructor","currentPlace","places","currentHintIndex","hintsGiven","guesses","gameState","startTime","Date","now","achievements","geocodingApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","geocodingBaseUrl","getCurrentHint","currentHint","sarcastic_descriptions","length","hintNumber","text","isLastHint","getNextHint","push","id","submitGuess","guess","guessData","location","country","timestamp","isCorrect","checkGuess","checkAchievements","locationMatch","toLowerCase","includes","name","countryMatch","getGameStatus","gameTime","minutes","Math","floor","seconds","hintsUsed","totalHints","guessesMade","maxGuesses","toString","padStart","newAchievements","title","description","icon","hintEfficiency","forEach","achievement","find","a","resetGame","getMapView","baseZoom","zoomIncrement","currentZoom","min","center","latitude","longitude","zoom","getGuessFeedback","distance","calculateDistance","direction","getDirection","round","latDiff","abs","lonDiff","sqrt","gameService"],"sources":["/Users/keithlesser/Documents/projects/fooqawhi-frontend/src/services/gameService.js"],"sourcesContent":["import { placesData } from '../data/places.js';\nimport axios from 'axios';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.hintsGiven = []\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n    this.startTime = Date.now();\n    this.achievements = [];\n    \n    // Google Geocoding API configuration\n    this.geocodingApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'YOUR_API_KEY_HERE';\n    this.geocodingBaseUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    let currentHint = null;\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      currentHint = {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n      return currentHint;\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    this.hintsGiven.push({\n      id: this.currentHintIndex + 1, \n      text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex] \n    })\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Submit a guess\n  submitGuess(guess) {\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: this.checkGuess(guess)\n    };\n\n    this.guesses.push(guessData);\n\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n      this.checkAchievements(); // Check achievements on win\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n\n    return guessData;\n  }\n\n  // Check if guess is correct\n  checkGuess(guess) {\n    const locationMatch = guess.location.toLowerCase().includes(this.currentPlace.name.toLowerCase());\n    const countryMatch = guess.country.toLowerCase().includes(this.currentPlace.country.toLowerCase());\n    return locationMatch && countryMatch;\n  }\n\n  // Get game status\n  getGameStatus() {\n    const gameTime = Date.now() - this.startTime;\n    const minutes = Math.floor(gameTime / 60000);\n    const seconds = Math.floor((gameTime % 60000) / 1000);\n    \n    return {\n      currentHint: this.getCurrentHint(),\n      hintsGiven: this.hintsGiven,\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses,\n      gameTime: `${minutes}:${seconds.toString().padStart(2, '0')}`,\n      achievements: this.achievements\n    };\n  }\n\n  // Check and award achievements\n  checkAchievements() {\n    const newAchievements = [];\n    \n    // Speed achievements\n    const gameTime = Date.now() - this.startTime;\n    if (gameTime < 60000 && this.gameState === 'won') { // Under 1 minute\n      newAchievements.push({\n        id: 'speed_demon',\n        title: 'Speed Demon',\n        description: 'Found the Fooqawhi in under 1 minute!',\n        icon: 'âš¡'\n      });\n    }\n    \n    // Efficiency achievements\n    const hintEfficiency = (this.currentHintIndex + 1) / this.currentPlace.sarcastic_descriptions.length;\n    if (hintEfficiency <= 0.5 && this.gameState === 'won') { // Used 50% or fewer hints\n      newAchievements.push({\n        id: 'hint_master',\n        title: 'Hint Master',\n        description: 'Solved with 50% or fewer hints!',\n        icon: 'ðŸ§ '\n      });\n    }\n    \n    // Accuracy achievements\n    if (this.guesses.length === 1 && this.gameState === 'won') { // First guess correct\n      newAchievements.push({\n        id: 'first_guess',\n        title: 'First Guess Wonder',\n        description: 'Found the Fooqawhi on your first try!',\n        icon: 'ðŸŽ¯'\n      });\n    }\n    \n    // Add new achievements\n    newAchievements.forEach(achievement => {\n      if (!this.achievements.find(a => a.id === achievement.id)) {\n        this.achievements.push(achievement);\n      }\n    });\n    \n    return newAchievements;\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n    this.startTime = Date.now();\n    this.achievements = [];\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + (this.currentHintIndex * zoomIncrement), 8);\n    \n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    \n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    \n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\n\nexport default gameService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}