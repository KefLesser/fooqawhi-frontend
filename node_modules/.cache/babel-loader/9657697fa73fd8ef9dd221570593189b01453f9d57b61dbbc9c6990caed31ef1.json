{"ast":null,"code":"import { placesData } from '../data/places.js';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n    this.startTime = Date.now();\n    this.achievements = [];\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      return {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Submit a guess\n  submitGuess(guess) {\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: this.checkGuess(guess)\n    };\n    this.guesses.push(guessData);\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n    return guessData;\n  }\n\n  // Check if guess is correct\n  checkGuess(guess) {\n    const locationMatch = guess.location.toLowerCase().includes(this.currentPlace.name.toLowerCase());\n    const countryMatch = guess.country.toLowerCase().includes(this.currentPlace.country.toLowerCase());\n    return locationMatch && countryMatch;\n  }\n\n  // Get game status\n  getGameStatus() {\n    const gameTime = Date.now() - this.startTime;\n    const minutes = Math.floor(gameTime / 60000);\n    const seconds = Math.floor(gameTime % 60000 / 1000);\n    return {\n      currentHint: this.getCurrentHint(),\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses,\n      gameTime: `${minutes}:${seconds.toString().padStart(2, '0')}`,\n      achievements: this.achievements\n    };\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + this.currentHintIndex * zoomIncrement, 8);\n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\nexport default gameService;","map":{"version":3,"names":["placesData","GameService","constructor","currentPlace","places","currentHintIndex","guesses","gameState","startTime","Date","now","achievements","getCurrentHint","sarcastic_descriptions","length","hintNumber","text","isLastHint","getNextHint","submitGuess","guess","guessData","id","location","country","timestamp","isCorrect","checkGuess","push","locationMatch","toLowerCase","includes","name","countryMatch","getGameStatus","gameTime","minutes","Math","floor","seconds","currentHint","hintsUsed","totalHints","guessesMade","maxGuesses","toString","padStart","resetGame","getMapView","baseZoom","zoomIncrement","currentZoom","min","center","latitude","longitude","zoom","getGuessFeedback","distance","calculateDistance","direction","getDirection","round","latDiff","abs","lonDiff","sqrt","gameService"],"sources":["/Users/keithlesser/Documents/projects/fooqawhi-frontend/src/services/gameService.js"],"sourcesContent":["import { placesData } from '../data/places.js';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n    this.startTime = Date.now();\n    this.achievements = [];\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      return {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Submit a guess\n  submitGuess(guess) {\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: this.checkGuess(guess)\n    };\n\n    this.guesses.push(guessData);\n\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n\n    return guessData;\n  }\n\n  // Check if guess is correct\n  checkGuess(guess) {\n    const locationMatch = guess.location.toLowerCase().includes(this.currentPlace.name.toLowerCase());\n    const countryMatch = guess.country.toLowerCase().includes(this.currentPlace.country.toLowerCase());\n    return locationMatch && countryMatch;\n  }\n\n  // Get game status\n  getGameStatus() {\n    const gameTime = Date.now() - this.startTime;\n    const minutes = Math.floor(gameTime / 60000);\n    const seconds = Math.floor((gameTime % 60000) / 1000);\n    \n    return {\n      currentHint: this.getCurrentHint(),\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses,\n      gameTime: `${minutes}:${seconds.toString().padStart(2, '0')}`,\n      achievements: this.achievements\n    };\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + (this.currentHintIndex * zoomIncrement), 8);\n    \n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    \n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    \n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\n\nexport default gameService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}