{"ast":null,"code":"import { placesData } from '../data/places.js';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      return {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Submit a guess\n  submitGuess(guess) {\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: this.checkGuess(guess)\n    };\n    this.guesses.push(guessData);\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n    return guessData;\n  }\n\n  // Check if guess is correct\n  checkGuess(guess) {\n    const locationMatch = guess.location.toLowerCase().includes(this.currentPlace.name.toLowerCase());\n    const countryMatch = guess.country.toLowerCase().includes(this.currentPlace.country.toLowerCase());\n    return locationMatch && countryMatch;\n  }\n\n  // Get game status\n  getGameStatus() {\n    return {\n      currentHint: this.getCurrentHint(),\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses\n    };\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + this.currentHintIndex * zoomIncrement, 8);\n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\nexport default gameService;","map":{"version":3,"names":["placesData","GameService","constructor","currentPlace","places","currentHintIndex","guesses","gameState","getCurrentHint","sarcastic_descriptions","length","hintNumber","text","isLastHint","getNextHint","submitGuess","guess","guessData","id","Date","now","location","country","timestamp","isCorrect","checkGuess","push","locationMatch","toLowerCase","includes","name","countryMatch","getGameStatus","currentHint","hintsUsed","totalHints","guessesMade","maxGuesses","resetGame","getMapView","baseZoom","zoomIncrement","currentZoom","Math","min","center","latitude","longitude","zoom","getGuessFeedback","distance","calculateDistance","direction","getDirection","round","latDiff","abs","lonDiff","sqrt","gameService"],"sources":["/Users/keithlesser/Documents/projects/fooqawhi-frontend/src/services/gameService.js"],"sourcesContent":["import { placesData } from '../data/places.js';\n\n// Game state management\nclass GameService {\n  constructor() {\n    this.currentPlace = placesData.places[0]; // Use Matera for testing\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing'; // 'playing', 'won', 'lost'\n  }\n\n  // Get current hint\n  getCurrentHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length) {\n      return {\n        hintNumber: this.currentHintIndex + 1,\n        text: this.currentPlace.sarcastic_descriptions[this.currentHintIndex],\n        isLastHint: this.currentHintIndex === this.currentPlace.sarcastic_descriptions.length - 1\n      };\n    }\n    return null;\n  }\n\n  // Get next hint\n  getNextHint() {\n    if (this.currentHintIndex < this.currentPlace.sarcastic_descriptions.length - 1) {\n      this.currentHintIndex++;\n      return this.getCurrentHint();\n    }\n    return null;\n  }\n\n  // Submit a guess\n  submitGuess(guess) {\n    const guessData = {\n      id: Date.now(),\n      location: guess.location,\n      country: guess.country,\n      timestamp: new Date(),\n      isCorrect: this.checkGuess(guess)\n    };\n\n    this.guesses.push(guessData);\n\n    if (guessData.isCorrect) {\n      this.gameState = 'won';\n    } else if (this.guesses.length >= 5) {\n      this.gameState = 'lost';\n    }\n\n    return guessData;\n  }\n\n  // Check if guess is correct\n  checkGuess(guess) {\n    const locationMatch = guess.location.toLowerCase().includes(this.currentPlace.name.toLowerCase());\n    const countryMatch = guess.country.toLowerCase().includes(this.currentPlace.country.toLowerCase());\n    return locationMatch && countryMatch;\n  }\n\n  // Get game status\n  getGameStatus() {\n    return {\n      currentHint: this.getCurrentHint(),\n      hintsUsed: this.currentHintIndex + 1,\n      totalHints: this.currentPlace.sarcastic_descriptions.length,\n      guessesMade: this.guesses.length,\n      maxGuesses: 5,\n      gameState: this.gameState,\n      currentPlace: this.currentPlace,\n      guesses: this.guesses\n    };\n  }\n\n  // Reset game\n  resetGame() {\n    this.currentHintIndex = 0;\n    this.guesses = [];\n    this.gameState = 'playing';\n  }\n\n  // Get map center and zoom based on hint level\n  getMapView() {\n    const baseZoom = 2;\n    const zoomIncrement = 1;\n    const currentZoom = Math.min(baseZoom + (this.currentHintIndex * zoomIncrement), 8);\n    \n    return {\n      center: [this.currentPlace.latitude, this.currentPlace.longitude],\n      zoom: currentZoom\n    };\n  }\n\n  // Get feedback for incorrect guess\n  getGuessFeedback(guess) {\n    const distance = this.calculateDistance(guess);\n    const direction = this.getDirection(guess);\n    \n    if (distance < 100) {\n      return \"You're very close! The Fooqawhi are practically within shouting distance.\";\n    } else if (distance < 500) {\n      return `You're getting warmer! The Fooqawhi are about ${Math.round(distance)}km ${direction} from your guess.`;\n    } else if (distance < 1000) {\n      return `Not quite there yet. The Fooqawhi are approximately ${Math.round(distance)}km ${direction} from your guess.`;\n    } else {\n      return `The Fooqawhi are quite far from your guess - about ${Math.round(distance)}km ${direction}.`;\n    }\n  }\n\n  // Calculate approximate distance (simplified)\n  calculateDistance(guess) {\n    // This is a simplified distance calculation\n    // In a real app, you'd use proper geocoding and distance calculation\n    const latDiff = Math.abs(this.currentPlace.latitude - (guess.latitude || 0));\n    const lonDiff = Math.abs(this.currentPlace.longitude - (guess.longitude || 0));\n    return Math.sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111; // Rough km conversion\n  }\n\n  // Get direction from guess to actual location\n  getDirection(guess) {\n    // Simplified direction calculation\n    const latDiff = this.currentPlace.latitude - (guess.latitude || 0);\n    const lonDiff = this.currentPlace.longitude - (guess.longitude || 0);\n    \n    if (Math.abs(latDiff) > Math.abs(lonDiff)) {\n      return latDiff > 0 ? 'north' : 'south';\n    } else {\n      return lonDiff > 0 ? 'east' : 'west';\n    }\n  }\n}\n\n// Create singleton instance\nconst gameService = new GameService();\n\nexport default gameService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}